// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// In production, these should come from environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://obolgajchkvvpvkxyoya.supabase.co";
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9ib2xnYWpjaGt2dnB2a3h5b3lhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0MjA3NzAsImV4cCI6MjA2MDk5Njc3MH0.wAPBgM1FNfw1J0GRawXZDOhlI6orGsR1gK50FnA9xLw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Initialize the Supabase client with error handling
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
});

// Helper function to check database connection
export const checkDatabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('noise_reports').select('id').limit(1);
    
    if (error) {
      console.error('Database connection error:', error);
      return false;
    }
    
    return true;
  } catch (err) {
    console.error('Failed to connect to Supabase:', err);
    return false;
  }
};

// Add the missing fetchNoiseLevels function
export const fetchNoiseLevels = async (
  fromDate?: Date, 
  toDate?: Date, 
  noiseType?: string, 
  severityLevel?: string
) => {
  try {
    let query = supabase.from('noise_reports').select('*');
    
    // Add date filters if provided
    if (fromDate) {
      query = query.gte('created_at', fromDate.toISOString());
    }
    if (toDate) {
      query = query.lte('created_at', toDate.toISOString());
    }
    
    // Add noise type filter if provided and not 'all'
    if (noiseType && noiseType !== 'all') {
      query = query.eq('noise_type', noiseType);
    }
    
    // Add severity filter if provided and not 'all'
    if (severityLevel && severityLevel !== 'all') {
      switch (severityLevel) {
        case 'low':
          query = query.lt('decibel_level', 60);
          break;
        case 'medium':
          query = query.gte('decibel_level', 60).lt('decibel_level', 80);
          break;
        case 'high':
          query = query.gte('decibel_level', 80);
          break;
      }
    }
    
    // Order by created_at
    query = query.order('created_at', { ascending: false });
    
    const { data, error } = await query;
    
    if (error) throw error;
    
    return data || [];
  } catch (error) {
    console.error('Error fetching noise levels:', error);
    return [];
  }
};
